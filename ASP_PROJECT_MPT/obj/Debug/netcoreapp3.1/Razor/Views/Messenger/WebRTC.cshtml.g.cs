#pragma checksum "C:\Users\leox5\МПТ\3 Курс\1 Семестр\mptASP\ASP_PROJECT_MPT\Views\Messenger\WebRTC.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9759a92cbc715b44c94dacbc9b279159902d3688"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Messenger_WebRTC), @"mvc.1.0.view", @"/Views/Messenger/WebRTC.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\leox5\МПТ\3 Курс\1 Семестр\mptASP\ASP_PROJECT_MPT\Views\_ViewImports.cshtml"
using ASP_PROJECT_MPT;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\leox5\МПТ\3 Курс\1 Семестр\mptASP\ASP_PROJECT_MPT\Views\_ViewImports.cshtml"
using ASP_PROJECT_MPT.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9759a92cbc715b44c94dacbc9b279159902d3688", @"/Views/Messenger/WebRTC.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cedab70cb52de2e418987a753e82ee61855435dc", @"/Views/_ViewImports.cshtml")]
    public class Views_Messenger_WebRTC : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/signalr.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\leox5\МПТ\3 Курс\1 Семестр\mptASP\ASP_PROJECT_MPT\Views\Messenger\WebRTC.cshtml"
   ViewData["Title"] = "WebRTC with ASP.NET Core"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("\n");
            WriteLiteral(@"
<div class=""roomCreate"">
    <label for=""name"">Room Name:</label>
    <input type=""text"" id=""roomNameTxt"" />
    <button id=""createRoomBtn"">Create</button>
</div>

<div>
    <table id=""roomTable"" class=""display"" style=""width:100%;"">
        <thead>
            <tr>
                <th>Room ID</th>
                <th>Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

<div class=""borderLine""></div>

<div>
    <div class=""connectionStatus"">
        <p id=""connectionStatusMessage"">Вы можете присоединиться к уже существующей комнате или создать свою</p>
    </div>
    <h5>Video chat</h5>
    <div class=""videoArea"">
        <video width=""400"" id=""localVideo"" autoplay playsinline></video>
        <video width=""400"" id=""remoteVideo"" autoplay playsinline></video>
    </div>

    <h5>Отправка файлов</h5>
    <div id=""fileShare"">
        <input type=""file"" id=""fileInput"">
        <button id=""sendFileBtn"" class=""sendFileBtn"">Send</button>
    </d");
            WriteLiteral("iv>\n    <div id=\"fileTable\" class=\"fileTable\">\n        <h5>Полученные файлы</h5>\n");
            WriteLiteral("        <dl>\n            <dt>\n\n            </dt>\n        </dl>\n    </div>\n</div>\n\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9759a92cbc715b44c94dacbc9b279159902d36885503", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script type=""text/javascript"" src=""https://webrtc.github.io/adapter/adapter-latest.js""></script>
    <script type=""text/javascript"" src=""https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js""></script>
    <script type=""text/javascript"" >
        ""use strict"";

        var connection = new signalR.HubConnectionBuilder().withUrl(""/WebRTCHub"").build();

        /****************************************************************************
        * Initial setup
        ****************************************************************************/

        const configuration = {
            'iceServers': [{
                'urls': 'stun:stun.l.google.com:19302'
            }]
        };
        const peerConn = new RTCPeerConnection(configuration);

        const roomNameTxt = document.getElementById('roomNameTxt');
        const createRoomBtn = document.getElementById('createRoomBtn');
        const roomTable = document.getElementById('roomTable');
        const connectionStatusMessage = document");
                WriteLiteral(@".getElementById('connectionStatusMessage');
        const fileInput = document.getElementById('fileInput');
        const sendFileBtn = document.getElementById('sendFileBtn');
        const fileTable = document.getElementById('fileTable');
        const localVideo = document.getElementById('localVideo');
        const remoteVideo = document.getElementById('remoteVideo');

        let myRoomId;
        let localStream;
        let remoteStream;
        let fileReader;
        let isInitiator = false;
        let hasRoomJoined = false;

        fileInput.disabled = true;
        sendFileBtn.disabled = true;

        $(roomTable).DataTable({
            columns: [
                { data: 'RoomId', ""width"": ""30%"" },
                { data: 'Name', ""width"": ""50%"" },
                { data: 'Button', ""width"": ""15%"" }
            ],
            ""lengthChange"": false,
            ""searching"": false,
            ""language"": {
                ""emptyTable"": ""Нет доступных комнат""
            }
        });

        //set");
                WriteLiteral(@"up my video here.
        grabWebCamVideo();

        /****************************************************************************
        * Signaling server
        ****************************************************************************/

        // Connect to the signaling server
        connection.start().then(function () {

            connection.on('updateRoom', function (data) {
                var obj = JSON.parse(data);
                $(roomTable).DataTable().clear().rows.add(obj).draw();
            });

            connection.on('created', function (roomId) {
                console.log('Created room', roomId);
                roomNameTxt.disabled = true;
                createRoomBtn.disabled = true;
                hasRoomJoined = true;
                connectionStatusMessage.innerText = 'Создана комната ' + roomId + '. Ождание сторонних подключений...';
                myRoomId = roomId;
                isInitiator = true;
            });

            connection.on('joined', function (room");
                WriteLiteral(@"Id) {
                console.log('This peer has joined room', roomId);
                myRoomId = roomId;
                isInitiator = false;
            });

            connection.on('error', function (message) {
                alert(message);
            });

            connection.on('ready', function () {
                console.log('Socket is ready');
                roomNameTxt.disabled = true;
                createRoomBtn.disabled = true;
                hasRoomJoined = true;
                connectionStatusMessage.innerText = 'Подключение...';
                createPeerConnection(isInitiator, configuration);
            });

            connection.on('message', function (message) {
                console.log('Client received message:', message);
                signalingMessageCallback(message);
            });

            connection.on('bye', function () {
                console.log(`Peer leaving room.`);
                // If peer did not create the room, re-enter to be creator.
            ");
                WriteLiteral(@"    connectionStatusMessage.innerText = `Other peer left room ${myRoomId}.`;
            });

            window.addEventListener('unload', function () {
                if (hasRoomJoined) {
                    console.log(`Unloading window. Notifying peers in ${myRoomId}.`);
                    connection.invoke(""LeaveRoom"", myRoomId).catch(function (err) {
                        return console.error(err.toString());
                    });
                }
            });

            //Get room list.
            connection.invoke(""GetRoomInfo"").catch(function (err) {
                return console.error(err.toString());
            });

        }).catch(function (err) {
            return console.error(err.toString());
        });

        /**
        * Send message to signaling server
        */
        function sendMessage(message) {
            console.log('Client sending message: ', message);
            connection.invoke(""SendMessage"", myRoomId, message).catch(function (err) {
                return");
                WriteLiteral(@" console.error(err.toString());
            });
        }

        /****************************************************************************
        * Room management
        ****************************************************************************/

        $(createRoomBtn).click(function () {
            var name = roomNameTxt.value;
            connection.invoke(""CreateRoom"", name).catch(function (err) {
                return console.error(err.toString());
            });
        });

        $('#roomTable tbody').on('click', 'button', function () {
            if (hasRoomJoined) {
                alert('Вы уже присоеденились.');
            } else {
                var data = $(roomTable).DataTable().row($(this).parents('tr')).data();
                connection.invoke(""Join"", data.RoomId).catch(function (err) {
                    return console.error(err.toString());
                });
            }
        });

        $(fileInput).change(function () {
            let file = fileInput.files[0];");
                WriteLiteral(@"
            if (file) {
                sendFileBtn.disabled = false;
            } else {
                sendFileBtn.disabled = true;
            }
        });

        $(sendFileBtn).click(function () {
            sendFileBtn.disabled = true;
            sendFile();
        });

        /****************************************************************************
        * User media (webcam)
        ****************************************************************************/

        function grabWebCamVideo() {
            console.log('Getting user media (video) ...');
            navigator.mediaDevices.getUserMedia({
                audio: true,
                video: true
            })
                .then(gotStream)
                .catch(function (e) {
                    alert('оишбка при подключении к веб-камере: ' + e.name);
                });
        }

        function gotStream(stream) {
            console.log('getUserMedia video stream URL:', stream);
            localStream = stream;
 ");
                WriteLiteral(@"           peerConn.addStream(localStream);
            localVideo.srcObject = stream;
        }

        /****************************************************************************
        * WebRTC peer connection and data channel
        ****************************************************************************/

        var dataChannel;

        function signalingMessageCallback(message) {
            if (message.type === 'offer') {
                console.log('Got offer. Sending answer to peer.');
                peerConn.setRemoteDescription(new RTCSessionDescription(message), function () { },
                    logError);
                peerConn.createAnswer(onLocalSessionCreated, logError);

            } else if (message.type === 'answer') {
                console.log('Got answer.');
                peerConn.setRemoteDescription(new RTCSessionDescription(message), function () { },
                    logError);

            } else if (message.type === 'candidate') {
                peerConn.add");
                WriteLiteral(@"IceCandidate(new RTCIceCandidate({
                    candidate: message.candidate
                }));

            }
        }

        function createPeerConnection(isInitiator, config) {
            console.log('Creating Peer connection as initiator?', isInitiator, 'config:',
                config);

            // send any ice candidates to the other peer
            peerConn.onicecandidate = function (event) {
                console.log('icecandidate event:', event);
                if (event.candidate) {
                    // Trickle ICE
                    //sendMessage({
                    //    type: 'candidate',
                    //    label: event.candidate.sdpMLineIndex,
                    //    id: event.candidate.sdpMid,
                    //    candidate: event.candidate.candidate
                    //});
                } else {
                    console.log('End of candidates.');
                    // Vanilla ICE
                    sendMessage(peerConn.localDescription);
      ");
                WriteLiteral(@"          }
            };

            peerConn.ontrack = function (event) {
                console.log('icecandidate ontrack event:', event);
                remoteVideo.srcObject = event.streams[0];
            };

            if (isInitiator) {
                console.log('Creating Data Channel');
                dataChannel = peerConn.createDataChannel('sendDataChannel');
                onDataChannelCreated(dataChannel);

                console.log('Creating an offer');
                peerConn.createOffer(onLocalSessionCreated, logError);
            } else {
                peerConn.ondatachannel = function (event) {
                    console.log('ondatachannel:', event.channel);
                    dataChannel = event.channel;
                    onDataChannelCreated(dataChannel);
                };
            }
        }

        function onLocalSessionCreated(desc) {
            console.log('local session created:', desc);
            peerConn.setLocalDescription(desc, function () {
          ");
                WriteLiteral(@"      // Trickle ICE
                //console.log('sending local desc:', peerConn.localDescription);
                //sendMessage(peerConn.localDescription);
            }, logError);
        }

        function onDataChannelCreated(channel) {
            console.log('onDataChannelCreated:', channel);

            channel.onopen = function () {
                console.log('Соединение открыто');
                connectionStatusMessage.innerText = 'Соединение открыто';
                fileInput.disabled = false;
            };

            channel.onclose = function () {
                console.log('Соединение закрыто.');
                connectionStatusMessage.innerText = 'Соединение закртыо.';
            }

            channel.onmessage = onReceiveMessageCallback();
        }

        function onReceiveMessageCallback() {
            let count;
            let fileSize, fileName;
            let receiveBuffer = [];

            return function onmessage(event) {
                if (typeof event.data === 's");
                WriteLiteral(@"tring') {
                    const fileMetaInfo = event.data.split(',');
                    fileSize = parseInt(fileMetaInfo[0]);
                    fileName = fileMetaInfo[1];
                    count = 0;
                    return;
                }

                receiveBuffer.push(event.data);
                count += event.data.byteLength;

                if (fileSize === count) {
                    // all data chunks have been received
                    const received = new Blob(receiveBuffer);
                    receiveBuffer = [];

                    $(fileTable).children('dl').append('<dt><a></a></dt>');
                    const downloadAnchor = $(fileTable).find('a:last');
                    downloadAnchor.attr('href', URL.createObjectURL(received));
                    downloadAnchor.attr('download', fileName);
                    downloadAnchor.text(`");
#nullable restore
#line 378 "C:\Users\leox5\МПТ\3 Курс\1 Семестр\mptASP\ASP_PROJECT_MPT\Views\Messenger\WebRTC.cshtml"
                                    Write(User.Identity.Name);

#line default
#line hidden
#nullable disable
                WriteLiteral(@": ${fileName} (${fileSize} bytes)`);
                }
            };
        }

        function sendFile() {
            const file = fileInput.files[0];
            console.log(`File is ${[file.name, file.size, file.type, file.lastModified].join(' ')}`);

            if (file.size === 0) {
                alert('File is empty, please select a non-empty file.');
                return;
            }

            //send file size and file name as comma separated value.
            dataChannel.send(file.size + ',' + file.name);

            const chunkSize = 16384;
            fileReader = new FileReader();
            let offset = 0;
            fileReader.addEventListener('error', error => console.error('Error reading file:', error));
            fileReader.addEventListener('abort', event => console.log('File reading aborted:', event));
            fileReader.addEventListener('load', e => {
                console.log('FileRead.onload ', e);
                dataChannel.send(e.target.result);
               ");
                WriteLiteral(@" offset += e.target.result.byteLength;
                if (offset < file.size) {
                    readSlice(offset);
                } else {
                    alert(`${file.name} файл был успешно отправлен.`);
                    sendFileBtn.disabled = false;
                }
            });
            const readSlice = o => {
                console.log('readSlice ', o);
                const slice = file.slice(offset, o + chunkSize);
                fileReader.readAsArrayBuffer(slice);
            };
            readSlice(0);
        }

        /****************************************************************************
        * Auxiliary functions
        ****************************************************************************/

        function logError(err) {
            if (!err) return;
            if (typeof err === 'string') {
                console.warn(err);
            } else {
                console.warn(err.toString(), err);
            }
        }
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
