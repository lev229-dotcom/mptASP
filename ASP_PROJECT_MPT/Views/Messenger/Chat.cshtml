@model Chat
@{
    ViewBag.Title = "Переписка";

}


<style>
    .chat {
        margin-top: auto;
        margin-bottom: auto;
    }

    .card {
        width: 1100px;
        height: 600px;
        border-radius: 15px !important;
        background-color: rgba(0,206,209,1) !important;
    }

    .contacts_body {
        padding: 0.75rem 0 !important;
        overflow-y: auto;
        white-space: nowrap;
    }

    .msg_card_body {
        overflow-y: auto;
    }

    .card-header {
        border-radius: 15px 15px 0 0 !important;
        border-bottom: 0 !important;
    }

    .card-footer {
        border-radius: 0 0 15px 15px !important;
        border-top: 0 !important;
    }

    .container {
        align-content: center;
    }

    .search {
        border-radius: 15px 0 0 15px !important;
        background-color: rgba(0,0,0,0.3) !important;
        border: 0 !important;
        color: white !important;
    }

        .search:focus {
            box-shadow: none !important;
            outline: 0px !important;
        }

    .type_msg {
        background-color: rgba(0,0,0,0.3) !important;
        border: 0 !important;
        color: white !important;
        height: 60px !important;
        overflow-y: auto;
    }

        .type_msg:focus {
            box-shadow: none !important;
            outline: 0px !important;
        }

    .attach_btn {
        border-radius: 15px 0 0 15px !important;
        background-color: rgba(0,0,0,0.3) !important;
        border: 0 !important;
        color: white !important;
        cursor: pointer;
    }

    .send_btn {
        margin: 15px 0 0 auto;
        height: 50px;
        width: 100px;
        border-radius: 15px !important;
        background-color: rgba(0,0,0,0.3) !important;
        border: 0 !important;
        color: white !important;
        cursor: pointer;
    }
    .message {
        height: auto;
        width: auto;
        border-radius: 5px !important;
        background-color: rgba(0,0,0,0.3) !important;
        border: 0 !important;
        color: white !important;
        cursor: pointer;
    }

    .search_btn {
        border-radius: 0 15px 15px 0 !important;
        background-color: rgba(0,0,0,0.3) !important;
        border: 0 !important;
        color: white !important;
        cursor: pointer;
    }

    .contacts {
        list-style: none;
        padding: 0;
    }

        .contacts li {
            width: 100% !important;
            padding: 5px 10px;
            margin-bottom: 15px !important;
        }

    .active {
        background-color: rgba(0,0,0,0.3);
    }

    .user_img {
        height: 70px;
        width: 70px;
        border: 1.5px solid #f5f6fa;
    }

    .user_img_msg {
        height: 40px;
        width: 40px;
        border: 1.5px solid #f5f6fa;
    }

    .img_cont {
        position: relative;
        height: 70px;
        width: 70px;
    }

    .img_cont_msg {
        height: 40px;
        width: 40px;
    }

    .online_icon {
        position: absolute;
        height: 15px;
        width: 15px;
        background-color: #4cd137;
        border-radius: 50%;
        bottom: 0.2em;
        right: 0.4em;
        border: 1.5px solid white;
    }

    .offline {
        background-color: #c23616 !important;
    }

    .user_info {
        margin-top: auto;
        margin-bottom: auto;
        margin-left: 15px;
    }

        .user_info span {
            font-size: 20px;
            color: white;
        }

        .user_info p {
            font-size: 10px;
            color: rgba(255,255,255,0.6);
        }

    .video_cam {
        margin-left: 50px;
        margin-top: 5px;
    }

        .video_cam span {
            color: white;
            font-size: 20px;
            cursor: pointer;
            margin-right: 20px;
        }

    .msg_cotainer {
        margin-top: auto;
        margin-bottom: auto;
        margin-left: 10px;
        border-radius: 25px;
        background-color: #82ccdd;
        padding: 10px;
        position: relative;
    }

    .msg_cotainer_send {
        margin-top: auto;
        margin-bottom: auto;
        margin-right: 10px;
        border-radius: 25px;
        background-color: #78e08f;
        padding: 10px;
        position: relative;
    }

    .msg_time {
        position: absolute;
        left: 0;
        bottom: -15px;
        color: rgba(255,255,255,0.5);
        font-size: 10px;
    }

    .msg_time_send {
        position: absolute;
        right: 0;
        bottom: -15px;
        color: rgba(255,255,255,0.5);
        font-size: 10px;
    }

    .msg_head {
        position: relative;
    }

    #action_menu_btn {
        position: absolute;
        right: 10px;
        top: 10px;
        color: white;
        cursor: pointer;
        font-size: 20px;
    }

    .action_menu {
        z-index: 1;
        position: absolute;
        padding: 15px 0;
        background-color: rgba(0,0,0,0.5);
        color: white;
        border-radius: 15px;
        top: 30px;
        right: 15px;
        display: none;
    }

        .action_menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

            .action_menu ul li {
                width: 100%;
                padding: 10px 15px;
                margin-bottom: 5px;
            }

                .action_menu ul li i {
                    padding-right: 10px;
                }

                .action_menu ul li:hover {
                    cursor: pointer;
                    background-color: rgba(0,0,0,0.2);
                }

    .justify-content-end {
        background-color: #e09b1ecc;
        color: white;
        border-radius: 28px;
    }

    .justify-content-start {
        background-color: #ff005e6b;
        color: white;
        border-radius: 28px;
    }

    ul {
        list-style-type: none;
    }
</style>
<head>
    <title>Chat</title>
    <!--EmojiOneArea -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.min.js"></script>
</head>


<div id="loginBlock">
    <input id="userName" type="hidden" value="@User.Identity.Name" />
    @*<p id="ChatID" type="text">Chat ID is: @Model.ChatId</p>*@
    @*<input id="userPassword" type="text" />
        <input id="loginBtn" type="button" value="Войти" />*@
</div>
<br />

@*<form onsubmit="sendMessage(event)" asp-controller="Message" asp-action="CreateMessage">*@
<input type="hidden" name="roomId" value="@Model.ChatId">
@*<input type="text" name="message" id="message-input">
    <input type="button" id="sendBtn" value="Отправить" />*@
@*</form>*@



@*<div id="inputForm">
        <input type="text" id="message" />
        <input type="button" id="sendBtn" value="Отправить" />
    </div>*@
<div class="col-md-8 col-xl-6 chat">
    <div class="card">
        <div class="card-header msg_head">
            <div class="d-flex bd-highlight">
                <div class="user_info">
                    <span>Chat: @Model.Name <span id="chat-with-id"></span></span>
                </div>
            </div>
        </div>
        <div id="chatroom" class="card-body msg_card_body">
            @foreach (var item in Model.Messages)
            {
                <dl class="message">
                    <dt>
                        @item.MessageStr  <br />
                        @item.Timestamp
                    </dt>
                    @*<dt>@item.ChatId</dt>*@
                </dl>

            }

        </div>
        <div class="card-footer">
            <div class="input-group">
                <input type="text" name="message" id="message-input" />
                <button type="button" class="input-group-text send_btn" id="sendBtn">Отправить</button>
            </div> 
        </div>
    </div>
</div>


<script type="text/javascript">
    jQuery(document).ready(function ($) {
        $('#message-input').emojioneArea({
            pickerPosition: "top"
        });
    });
</script>
<script src="~/js/signalr/dist/browser/signalr.min.js"></script>
<script>
    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/chat")
        .build();

    hubConnection.on("Receive", function (message, userName)//устанавливает метод на стороне клиента,
    //который будет получать данные от сервера
    {

        let date = new Date()
        let day = date.getDate();
        let month = date.getMonth() + 1;
        let year = date.getFullYear();
        let hour = date.getHours();
        let min = date.getMinutes();
        let sec = date.getSeconds();

        let fullDate = `${day}.${month}.${year}  ${hour}:${min}:${sec}`;

        //$(chatroom).append('<dl><dt>{day}<a></a></dt></dl>');

        // создаем элемент <b> для имени пользователя
        let userNameElem = document.createElement("b");
        userNameElem.appendChild(document.createTextNode(userName + ": "));

        // создает элемент <p> для сообщения пользователя
        let elem = document.createElement("p");
        elem.appendChild(userNameElem);
        elem.appendChild(document.createTextNode(message));
        elem.appendChild(document.createElement("br"));
        elem.appendChild(document.createTextNode(fullDate));
        elem.className = "message"

        var firstElem = document.getElementById("chatroom").lastChild;
        document.getElementById("chatroom").insertBefore(elem, firstElem);
    });

    hubConnection.start()
        .then(function () {
            hubConnection.invoke('joinRoom', '@Model.ChatId', '@User.Identity.Name');
            onReceiveMessageCallback();
        })

        .catch(function (err) {
            hubConnection.log(err)
        })

    hubConnection.on("Notify", function (message) {

        // создает элемент <p> для сообщения пользователя
        let elem = document.createElement("p");
        elem.appendChild(document.createTextNode(message));

        var firstElem = document.getElementById("chatroom").lastChild;
        document.getElementById("chatroom").insertBefore(elem, firstElem);
    });

    //var sendMessage = function (event) {
    //    event.preventDefault();

    //    var data = new FormData(event.target);
    //    document.getElementById('message-input').value = '';
    //    axios.post('/Messenger/Chat', data)
    //        .then(res => {
    //            console.log("Message Sent!")
    //        })
    //        .catch(err => {
    //            console.log("Failed to send message!")
    //        })
    //}


    // отправка сообщения на сервер
    document.getElementById("sendBtn").addEventListener("click", function (e) {
        let message = document.getElementById("message-input").value;

                   hubConnection.invoke("Send", '@Model.ChatId', message, '@User.Identity.Name');//первый параметр которого представляет метод хаба,


        //обрабатывающий данный запрос,
        //а второй параметр - данные, отправляемые на сервер
        var block = document.getElementById("chatroom");
        block.scrollTop = block.scrollHeight;
    });

</script>
@*<script>
    $(function () {
        $("#message-input").emojioneArea();

    });
</script>*@